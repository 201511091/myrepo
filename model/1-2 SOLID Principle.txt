SRP (Single Responsibility Principle): 어떤 (구현)클래스 혹은 모듈이 목적에 따른 구분이 필요한 경우, 반드시 그 목적에 맞게 구분하여 만들어줘야하는 것. 결합성(Coupling) 응집성(Cohesion)

OCP (Open Close Prnciple): 클래스 혹은 모듈의 확장을 하되, 기존의 것이 수정이 안되도록 만드는 것. 계층을 만들어 주는 것.

LSP (Liskov Substitution Principle): 자식 클래스는 부모 클래스를 대체 할 수 있어야한다. 즉, 자식 클래스는 부모 클래스의 속성, 기능들을 모두 가지고 있으며, 부모 클래스에 해당되는 속성, 기능들이 하나라도 불일치 되면 안되는 것이다.

ISP (Interfaced Segregation Principle): 어떤 객체 내에 공통으로 분류 될수 있는 기능 들이 있는 경우, 그 기능들을 인터페이스로 묶어 분리하는 것. A -> B, A가 B에게 의존적임

DIP (Dependancy Inversion Principle): 구현에 의존하기 보다 추상에 의존해야 한다. 필요한 경우를 제외하곤 구현 클래스를 이용하는 일이 없어야한다.

-----------------------------------------------------

Duck <|-- MallardDuck
Duck <|-- ModelDuck
FlyBehavior <|.. FlyWithWings
FlyBehavior <|.. FlyRocketPowered
QuackBehavior <|.. Quack
Duck -> FlyBehavior
Duck -> QuackBehavior
abstract class Duck {
    -flyBehavior:FlyBehavior
    -quackBehavior:QuackBehavior
    +swim()
    +display()
    +performQuack()
    +performFly()
    +setFlyBehavior()
    +setQuackBehavior()
}
Interface QuackBehavior {
    +quack()
}
Interface FlyBehavior {
    +fly()
}

-----------------------------------------------------

Duck의 구조 따져보며 각각의 원칙들에 대해 설명하자.

SRP의 경우, MallardDuck과 ModelDuck은 서로 Duck의 일종이지만, 울음 소리와 비행 방식에 서로 다른 차이가 존재한다.
그렇기 때문에 오르의 공통된 속성 과 기능들을 Duck이라는 (추상)클래스에 묶어둔 뒤, 서로 구분되는 특징만을 추출하여 ModelDuck 과 MallardDuck이라는 하위 클래스에 묶어 둬야한다.
이렇게 각각의 한가지 클래스에 한가지 용도(책임)을 남겨 놓는 것을 보고 SRP가 지켜졌다고 한다.

OCP의 경우, 위의 인터페이스 부분을 보면 알 수가 있다.
만약 인터페이스가 없었더라면 새로운 비행 방식이나 울음 소리를 추가 할 경우 해당 하는 클래스들에 모두 추가를 해줘야 할 것이다.
이렇게 된느 것은 기존의 클래스를 수정해버리는 것이기에 OCP가 지켜지지 않았다고 할 수 있다.
그렇기 때문에 인터페이스를 이용하여 해당 울음 소리와 비행 방식을 분류 한 뒤, 원래의 클래스를 수정 할 필요 없이 단지 추가하는 것만으로 프로그램을 확장시켜 나갈 수가 있는 것이다.

LSP의 경우, 이는 울음 소리와 비행 방식을 인터페이스로 나눈 것과 밀접한 관련이 있다.
위와 유사하게 만약 fly()와 quack()가 인터페이스에 있지않고 duck 추상 클래스 내부에 바로 존재한다고 해보자.
그렇게 되면 MallardDuck과 ModelDuck은 서로 다른 울음소리와 비행 방식을 나타내기 위해 구현 하는 단계에서 fly()메소드와 quack() 메소드를 오버라이딩 해줘야한다.
그런데 오버라이딩이 됬다는 것은 곧 해당 자식들의 메소드가 부모의 메소드와 다르게 작동한다는 것을 의미한다. 
그렇기 때문에 LSP가 지켜지지 않게 되므로, 각각의 메소드들을 인터페이스로 빼주는 것이다.

ISP의 경우, SRP와 유사한 개념으로 인터페이스를 사용 할 시, 상속받는 대상이 쓸모없는 메소드를 구현하지 않도록 하는 것이다.
만약 위에서 한 번에 메소드를 처리하기 위해 인터페이스 둘을 묶었다고 치면, Interface Fly_QuackBehavior {+quack() +fly()} 이런 형태가 되었을 것이다.
그런데 이렇게 되버리면, 인터페이스에 두가지 메소드가 있기 때문에 해당 인터페이스를 구현해야하는 클래스들은 fly()나 quack() 메소드를 구현해야할 필요가 없음에도 불구하고 구현을 해야만 하는 상황이 발생하게 된다.
이런 쓸모없는 상황이 발생 하지 않도록 목적에 맞게 인터페이스를 분류하도록 하는 것이 바로 이 ISP이다.

마지막으로 DIP의 경우, 하위의 클래스들이 Duck이라는 추상 클래스에 의존하는 형태를 보고 알 수가 있다.
이런 형태가 이루어 지면, 구현 클래스 보다 상대적으로 변할 일이 적은 추상 클래스에 의존하는 클래스들이 더 안정적이게 될 수가 있다.